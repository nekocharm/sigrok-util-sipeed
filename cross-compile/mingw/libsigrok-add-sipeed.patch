diff --git a/Makefile.am b/Makefile.am
index 3b68142..5bf9113 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -701,6 +701,12 @@ src_libdrivers_la_SOURCES += \
 	src/hardware/siglent-sds/protocol.c \
 	src/hardware/siglent-sds/api.c
 endif
+if HW_SIPEED_SLOGIC_ANALYZER
+src_libdrivers_la_SOURCES += \
+ 	src/hardware/sipeed-slogic-analyzer/protocol.h \
+ 	src/hardware/sipeed-slogic-analyzer/protocol.c \
+ 	src/hardware/sipeed-slogic-analyzer/api.c
+endif
 if HW_SYSCLK_LWLA
 src_libdrivers_la_SOURCES += \
 	src/hardware/sysclk-lwla/lwla.h \
diff --git a/configure.ac b/configure.ac
index 194559e..7e6999c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -385,6 +385,7 @@ SR_DRIVER([serial DMM], [serial-dmm], [serial_comm])
 SR_DRIVER([serial LCR], [serial-lcr], [serial_comm])
 SR_DRIVER([SIGLENT SDL10x0], [siglent-sdl10x0])
 SR_DRIVER([Siglent SDS], [siglent-sds])
+SR_DRIVER([Sipeed Slogic Analyzer], [sipeed-slogic-analyzer])
 SR_DRIVER([Sysclk LWLA], [sysclk-lwla], [libusb])
 SR_DRIVER([Sysclk SLA5032], [sysclk-sla5032], [libusb])
 SR_DRIVER([Teleinfo], [teleinfo], [serial_comm])
diff --git a/src/hardware/sipeed-slogic-analyzer/api.c b/src/hardware/sipeed-slogic-analyzer/api.c
new file mode 100644
index 0000000..573c3e8
--- /dev/null
+++ b/src/hardware/sipeed-slogic-analyzer/api.c
@@ -0,0 +1,321 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2023 taorye <taorye@outlook.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <config.h>
+#include "protocol.h"
+
+static const uint32_t scanopts[] = {
+	SR_CONF_CONN,
+};
+
+static const uint32_t drvopts[] = {
+	SR_CONF_LOGIC_ANALYZER,
+};
+
+static const uint32_t devopts[] = {
+	SR_CONF_CONTINUOUS,
+	SR_CONF_LIMIT_SAMPLES | SR_CONF_GET | SR_CONF_SET,
+	SR_CONF_SAMPLERATE    | SR_CONF_GET | SR_CONF_SET | SR_CONF_LIST,
+	SR_CONF_TRIGGER_MATCH | SR_CONF_GET | SR_CONF_LIST,
+};
+
+static const int32_t trigger_matches[] = {
+	SR_TRIGGER_ZERO,
+	SR_TRIGGER_ONE,
+	SR_TRIGGER_RISING,
+	SR_TRIGGER_FALLING,
+	SR_TRIGGER_EDGE,
+};
+
+static struct sr_dev_driver sipeed_slogic_analyzer_driver_info;
+
+static GSList *scan(struct sr_dev_driver *di, GSList *options)
+{
+	int ret;
+	struct sr_dev_inst *sdi;
+	struct sr_usb_dev_inst *usb;
+	struct drv_context *drvc;
+	struct dev_context *devc;
+
+	struct sr_config *option;
+	struct libusb_device_descriptor des;
+	GSList *devices;
+	GSList *l, *conn_devices;
+	const char *conn;
+	char cbuf[128];
+	char *iManufacturer, *iProduct, *iSerialNumber, *iPortPath;
+
+	(void)options;
+
+	conn = NULL;
+
+	devices = NULL;
+	drvc = di->context;
+	drvc->instances = NULL;
+	
+	/* scan for devices, either based on a SR_CONF_CONN option
+	 * or on a USB scan. */
+	for (l = options; l; l = l->next) {
+		option = l->data;
+		switch (option->key) {
+		case SR_CONF_CONN:
+			conn = g_variant_get_string(option->data, NULL);
+			sr_info("use conn: %s", conn);
+			break;
+		default:
+			sr_warn("Unhandled option key: %u", option->key);
+		}
+	}
+	
+	if(!conn) {
+		conn = "359f.0300";
+	}
+
+	/* Find all slogic compatible devices. */
+	conn_devices = sr_usb_find(drvc->sr_ctx->libusb_ctx, conn);
+	for(l = conn_devices; l; l = l->next) {
+		usb = l->data;
+		ret = sr_usb_open(drvc->sr_ctx->libusb_ctx, usb);
+		if (SR_OK != ret) continue;
+		libusb_get_device_descriptor(
+			libusb_get_device(usb->devhdl), &des);
+		libusb_get_string_descriptor_ascii(usb->devhdl,
+				des.iManufacturer, cbuf, sizeof(cbuf));
+		iManufacturer = g_strdup(cbuf);
+		libusb_get_string_descriptor_ascii(usb->devhdl,
+				des.iProduct, cbuf, sizeof(cbuf));
+		iProduct = g_strdup(cbuf);
+		libusb_get_string_descriptor_ascii(usb->devhdl,
+				des.iSerialNumber, cbuf, sizeof(cbuf));
+		iSerialNumber = g_strdup(cbuf);
+		usb_get_port_path(libusb_get_device(usb->devhdl),
+				cbuf, sizeof(cbuf));
+		iPortPath = g_strdup(cbuf);
+		sr_usb_close(usb);
+
+		sdi = sr_dev_inst_user_new(iManufacturer, iProduct, NULL);
+		if (!sdi) continue;
+
+		for (int i = 0; i < 8; i++) {
+			sr_snprintf_ascii(cbuf, sizeof(cbuf), "D%d", i);
+			sr_dev_inst_channel_add(sdi, i, SR_CHANNEL_LOGIC, cbuf);
+		}
+		
+		sdi->serial_num = iSerialNumber;
+		sdi->connection_id = iPortPath;
+		sdi->status = SR_ST_INACTIVE;
+		sdi->conn = usb;
+		sdi->inst_type = SR_INST_USB;
+
+		devc = g_malloc0(sizeof(struct dev_context));
+		sdi->priv = devc;
+
+
+
+		devices = g_slist_append(devices, sdi);
+	}
+	// g_slist_free_full(conn_devices, (GDestroyNotify)sr_usb_dev_inst_free);
+
+	return std_scan_complete(di, devices);
+}
+
+static int dev_open(struct sr_dev_inst *sdi)
+{
+	int ret;
+	struct sr_usb_dev_inst *usb;
+	struct dev_context *devc;
+	struct sr_dev_driver *di;
+	struct drv_context *drvc;
+
+
+	if (!sdi) return SR_ERR_DEV_CLOSED;
+	/* TODO: get handle from sdi->conn and open it. */
+	usb  = sdi->conn;
+	devc = sdi->priv;
+	di	 = sdi->driver;
+	drvc = di->context;
+
+	ret = sr_usb_open(drvc->sr_ctx->libusb_ctx, usb);
+	if (SR_OK != ret) return ret;
+
+	ret = libusb_claim_interface(usb->devhdl, 0);
+	if (ret != LIBUSB_SUCCESS) {
+		switch (ret) {
+		case LIBUSB_ERROR_BUSY:
+			sr_err("Unable to claim USB interface. Another "
+			       "program or driver has already claimed it.");
+			break;
+		case LIBUSB_ERROR_NO_DEVICE:
+			sr_err("Device has been disconnected.");
+			break;
+		default:
+			sr_err("Unable to claim interface: %s.",
+			       libusb_error_name(ret));
+			break;
+		}
+		return SR_ERR;
+	}
+
+	devc_set_samplerate(devc, samplerates[7]);
+	
+	return std_dummy_dev_open(sdi);
+}
+
+static int dev_close(struct sr_dev_inst *sdi)
+{
+	int ret;
+	struct sr_usb_dev_inst *usb;
+	struct dev_context *devc;
+	struct sr_dev_driver *di;
+	struct drv_context *drvc;
+
+	/* TODO: get handle from sdi->conn and close it. */
+	usb  = sdi->conn;
+	devc = sdi->priv;
+	di	 = sdi->driver;
+	drvc = di->context;
+
+	ret = libusb_release_interface(usb->devhdl, 0);
+	if (ret != LIBUSB_SUCCESS) {
+		switch (ret) {
+		case LIBUSB_ERROR_NO_DEVICE:
+			sr_err("Device has been disconnected.");
+			// return SR_ERR_DEV_CLOSED;
+			break;
+		default:
+			sr_err("Unable to release Interface for %s.",
+					libusb_error_name(ret));
+			break;
+		}
+	}
+	
+	sr_usb_close(usb);
+	
+	return std_dummy_dev_close(sdi);
+}
+
+static int config_get(uint32_t key, GVariant **data,
+	const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	int ret;
+	struct dev_context *devc;
+
+	(void)cg;
+
+	devc = sdi->priv;
+
+	ret = SR_OK;
+	switch (key) {
+	case SR_CONF_SAMPLERATE:
+		*data = g_variant_new_uint64(devc->cur_samplerate);
+		break;
+	case SR_CONF_LIMIT_SAMPLES:
+		*data = g_variant_new_uint64(devc->limit_samples);
+		break;
+	default:
+		return SR_ERR_NA;
+	}
+
+	return ret;
+}
+
+static int config_set(uint32_t key, GVariant *data,
+	const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	int ret;
+	struct dev_context *devc;
+
+	(void)cg;
+
+	devc = sdi->priv;
+
+	ret = SR_OK;
+	switch (key) {
+	case SR_CONF_SAMPLERATE:
+		if (std_u64_idx(data, ARRAY_AND_SIZE(samplerates)) < 0) {
+			ret = SR_ERR_ARG;
+		} else {
+			devc_set_samplerate(devc, g_variant_get_uint64(data));
+			{
+			size_t idx = 0;
+				for (GSList *l = sdi->channels; l; l = l->next, idx += 1) {
+					struct sr_channel *ch = l->data;
+					if (ch->type == SR_CHANNEL_LOGIC) { /* Might as well do this now, these are static. */
+						sr_dev_channel_enable(ch, (idx >= devc->cur_samplechannel) ? FALSE : TRUE);
+					} else {
+						return SR_ERR_BUG;
+					}
+				}
+			}
+		}
+		break;
+	case SR_CONF_LIMIT_SAMPLES:
+		devc->limit_samples = g_variant_get_uint64(data);
+		break;
+	default:
+		ret = SR_ERR_NA;
+	}
+
+	return ret;
+}
+
+static int config_list(uint32_t key, GVariant **data,
+	const struct sr_dev_inst *sdi, const struct sr_channel_group *cg)
+{
+	int ret;
+
+	ret = SR_OK;
+	switch (key) {
+	/* TODO */
+	case SR_CONF_SCAN_OPTIONS:
+	case SR_CONF_DEVICE_OPTIONS:
+		ret = STD_CONFIG_LIST(key, data, sdi, cg, scanopts, drvopts, devopts);
+		break;
+	case SR_CONF_SAMPLERATE:
+		*data = std_gvar_samplerates(ARRAY_AND_SIZE(samplerates));
+		break;
+	case SR_CONF_TRIGGER_MATCH:
+		*data = std_gvar_array_i32(ARRAY_AND_SIZE(trigger_matches));
+		break;
+	default:
+		ret = SR_ERR_NA;
+	}
+
+	return ret;
+}
+
+static struct sr_dev_driver sipeed_slogic_analyzer_driver_info = {
+	.name = "sipeed-slogic-analyzer",
+	.longname = "Sipeed Slogic Analyzer",
+	.api_version = 1,
+	.init = std_init,
+	.cleanup = std_cleanup,
+	.scan = scan,
+	.dev_list = std_dev_list,
+	.dev_clear = std_dev_clear,
+	.config_get = config_get,
+	.config_set = config_set,
+	.config_list = config_list,
+	.dev_open = dev_open,
+	.dev_close = dev_close,
+	.dev_acquisition_start = sipeed_slogic_acquisition_start,
+	.dev_acquisition_stop = sipeed_slogic_acquisition_stop,
+	.context = NULL,
+};
+SR_REGISTER_DEV_DRIVER(sipeed_slogic_analyzer_driver_info);
diff --git a/src/hardware/sipeed-slogic-analyzer/protocol.c b/src/hardware/sipeed-slogic-analyzer/protocol.c
new file mode 100644
index 0000000..211b174
--- /dev/null
+++ b/src/hardware/sipeed-slogic-analyzer/protocol.c
@@ -0,0 +1,297 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2023 taorye <taorye@outlook.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <config.h>
+#include "protocol.h"
+
+static int handle_events(int fd, int revents, void *cb_data);
+
+static void submit_data(void *data, size_t len, struct sr_dev_inst *sdi) {
+	struct sr_datafeed_logic logic = {
+		.length = len,
+		.unitsize = 1,
+		.data = data,
+	};
+
+	struct sr_datafeed_packet packet = {
+		.type = SR_DF_LOGIC,
+		.payload = &logic
+	};
+
+	sr_session_send(sdi, &packet);
+}
+
+static void LIBUSB_CALL receive_transfer(struct libusb_transfer *transfer) {
+
+	int ret;
+	const struct sr_dev_inst *sdi;
+	struct dev_context *devc;
+	struct sr_usb_dev_inst *usb;
+
+	sdi  = transfer->user_data;
+	devc = sdi->priv;
+	usb  = sdi->conn;
+
+	sr_dbg("usb status: %d", transfer->status);
+	switch (transfer->status) {
+		case LIBUSB_TRANSFER_COMPLETED: 
+		case LIBUSB_TRANSFER_TIMED_OUT: { /* may have received some data */
+			sr_dbg("\ttransfing: %u, transfered: %u, sum: %u/%u",
+					devc->bytes_transferring, devc->bytes_transfered,
+					(devc->bytes_transfered + devc->bytes_transferring),
+					devc->bytes_need_transfer);
+
+			devc->bytes_transfered += transfer->actual_length;
+			devc->bytes_transferring -= transfer->length;
+
+			if (transfer->actual_length == 0) {
+				devc->transfers_used -= 1;
+				break;
+			}
+
+			{
+				uint8_t *ptr = transfer->buffer;
+				size_t len = transfer->actual_length;
+				if (devc->cur_samplechannel != 8) {
+					size_t step = 8 / devc->cur_samplechannel;
+					uint8_t mask = 0xff >> (8 - devc->cur_samplechannel);
+					len *= step;
+					ptr = g_malloc(len);
+					for(size_t i=0; i<transfer->actual_length; i++) {
+						for(size_t j=0; j<step; j++) {
+							ptr[i*step+j] = mask & (transfer->buffer[i] >> (j * devc->cur_samplechannel));
+						}
+					}
+				}
+				submit_data(ptr, len, sdi);
+				if (devc->cur_samplechannel != 8) {
+					g_free(ptr);
+				}
+			}
+
+			size_t bytes_to_transfer = devc->bytes_need_transfer -
+				(devc->bytes_transfered + devc->bytes_transferring);
+			if (bytes_to_transfer > devc->transfers_buffer_size) {
+				bytes_to_transfer = devc->transfers_buffer_size;
+			}
+			if (bytes_to_transfer) {
+				transfer->length = bytes_to_transfer;
+				transfer->actual_length = 0;
+				transfer->timeout = devc->timeout * devc->transfers_used;
+				ret = libusb_submit_transfer(transfer);
+				if (ret) {
+					sr_warn("Failed to submit transfer: %s", libusb_error_name(ret));
+					devc->transfers_used -= 1;
+				}
+				sr_dbg("submit transfer: %p", transfer);
+
+				devc->bytes_transferring += bytes_to_transfer;
+			} else {
+				devc->transfers_used -= 1;
+			}
+		} break;
+
+		case LIBUSB_TRANSFER_NO_DEVICE: {
+			devc->transfers_used = 0;
+		} break;
+
+		default: {
+			devc->transfers_used -= 1;
+		} break;
+	}
+
+	if (devc->transfers_used == 0) {
+		sr_dbg("free all transfers");
+
+		sr_dbg("Bulk in %u/%u bytes", devc->bytes_transfered,
+				devc->bytes_need_transfer);
+		
+		sr_dev_acquisition_stop(sdi);
+	}
+};
+
+static int handle_events(int fd, int revents, void *cb_data)
+{
+	struct sr_dev_inst *sdi;
+	struct sr_dev_driver *di;
+	struct dev_context *devc;
+	struct drv_context *drvc;
+	struct timeval tv;
+
+	(void)fd;
+	(void)revents;
+
+	sdi = cb_data;
+	devc = sdi->priv;
+	di = sdi->driver;
+	drvc = di->context;
+
+	sr_dbg("handle_events enter");
+
+	if (devc->acq_aborted == TRUE) {
+		for (size_t i = 0; i < NUM_MAX_TRANSFERS; ++i) {
+			struct libusb_transfer *transfer = devc->transfers[i];
+			if (transfer) {
+				libusb_cancel_transfer(transfer);
+				g_free(transfer->buffer);
+				libusb_free_transfer(transfer);
+			}
+			devc->transfers[i] = NULL;
+		}
+
+		usb_source_remove(sdi->session, drvc->sr_ctx);
+		std_session_send_df_end(sdi);
+	}
+
+	memset(&tv, 0, sizeof(struct timeval));
+	libusb_handle_events_timeout_completed(drvc->sr_ctx->libusb_ctx, &tv,
+			&devc->acq_aborted);
+
+	return TRUE;
+}
+
+SR_PRIV int sipeed_slogic_acquisition_start(const struct sr_dev_inst *sdi)
+{
+	// sr_dbg("Enter func %s", __func__);
+	/* TODO: configure hardware, reset acquisition state, set up
+	 * callbacks and send header packet. */
+
+	struct sr_dev_driver *di;
+	struct dev_context *devc;
+	struct drv_context *drvc;
+	struct sr_usb_dev_inst *usb;
+
+	struct cmd_start_acquisition cmd;
+	int ret;
+	size_t size_transfer_buf;
+
+	devc = sdi->priv;
+	di = sdi->driver;
+	drvc = di->context;
+	usb  = sdi->conn;
+
+	// TODO
+	// if(devc->cur_samplechannel != 8) return SR_ERR_SAMPLERATE;
+
+	sr_dbg("samplerate: %uHz@%uch, samples: %u",
+			devc->cur_samplerate / SR_MHZ(1), 
+			devc->cur_samplechannel, 
+			devc->limit_samples);
+
+	clear_ep(EP_IN, usb->devhdl);
+
+	devc->acq_aborted = FALSE;
+  	devc->bytes_need_transfer = 0;
+	devc->bytes_transferring = 0;
+	devc->bytes_transfered = 0;
+	devc->transfers_used = 0;
+	memset(devc->transfers, 0, sizeof(devc->transfers));
+
+	devc->transfers_buffer_size = get_buffer_size(devc);
+	sr_dbg("transfers_buffer_size: %u", devc->transfers_buffer_size);
+
+	devc->timeout = get_timeout(devc);
+	sr_dbg("timeout: %ums", devc->timeout);
+	usb_source_add(sdi->session, drvc->sr_ctx, 10,
+			handle_events, (void *)sdi);
+
+	/* compute needed bytes */
+	uint64_t samples_in_bytes = devc->limit_samples * devc->cur_samplechannel / 8;
+	devc->bytes_need_transfer = samples_in_bytes / devc->transfers_buffer_size;
+	devc->bytes_need_transfer += !!(samples_in_bytes % devc->transfers_buffer_size);
+	devc->bytes_need_transfer *= devc->transfers_buffer_size;
+
+
+	while (devc->transfers_used < NUM_MAX_TRANSFERS && devc->bytes_transfered
+			+ devc->bytes_transferring < devc->bytes_need_transfer)
+	{
+		uint8_t *dev_buf = g_malloc(devc->transfers_buffer_size);
+		if (!dev_buf) {
+			sr_dbg("Failed to allocate memory");
+			sr_dev_acquisition_stop(sdi);
+			return SR_ERR_MALLOC;
+			break;
+		}
+
+		struct libusb_transfer *transfer = libusb_alloc_transfer(0);
+		if (!transfer) {
+			g_free(dev_buf);
+			sr_dbg("Failed to allocate transfer");
+			sr_dev_acquisition_stop(sdi);
+			return SR_ERR_MALLOC;
+			break;
+		}
+
+		size_t bytes_to_transfer = devc->bytes_need_transfer -
+			devc->bytes_transfered - devc->bytes_transferring;
+		if (bytes_to_transfer > devc->transfers_buffer_size) {
+			bytes_to_transfer = devc->transfers_buffer_size;
+		}
+
+		libusb_fill_bulk_transfer(transfer, usb->devhdl, EP_IN | LIBUSB_ENDPOINT_IN,
+									dev_buf, bytes_to_transfer, receive_transfer,
+									sdi, devc->timeout * (devc->transfers_used + 1));
+		transfer->actual_length = 0;
+
+		ret = libusb_submit_transfer(transfer);
+		if (ret) {
+			sr_dbg("Failed to submit transfer: %s.", libusb_error_name(ret));
+			g_free(transfer->buffer);
+			libusb_free_transfer(transfer);
+			sr_dev_acquisition_stop(sdi);
+			return SR_ERR_IO;
+			break;
+		}
+		devc->transfers[devc->transfers_used] = transfer;
+
+		devc->bytes_transferring += bytes_to_transfer;
+		devc->transfers_used += 1;
+	}
+	sr_dbg("Submited %u transfers", devc->transfers_used);
+
+	std_session_send_df_frame_begin(sdi);
+	std_session_send_df_header(sdi);
+
+
+	cmd.sample_rate = devc->cur_samplerate / SR_MHZ(1);
+	cmd.sample_channel = devc->cur_samplechannel;
+
+	ret = libusb_control_transfer(
+		usb->devhdl, LIBUSB_REQUEST_TYPE_VENDOR | LIBUSB_ENDPOINT_OUT, CMD_START, 0x0000,
+		0x0000, (unsigned char *)&cmd, 3 /*sizeof(cmd)*/, 100);
+	if (ret < 0) {
+		sr_dbg("Unable to send start command: %s", libusb_error_name(ret));
+		return SR_ERR_NA;
+	}
+	sr_dbg("CMD_STARTED");
+
+	return SR_OK;
+}
+
+SR_PRIV int sipeed_slogic_acquisition_stop(struct sr_dev_inst *sdi)
+{
+
+	struct dev_context *devc;
+
+	devc = sdi->priv;
+
+	devc->acq_aborted = TRUE;
+
+	return SR_OK;
+}
diff --git a/src/hardware/sipeed-slogic-analyzer/protocol.h b/src/hardware/sipeed-slogic-analyzer/protocol.h
new file mode 100644
index 0000000..34f793b
--- /dev/null
+++ b/src/hardware/sipeed-slogic-analyzer/protocol.h
@@ -0,0 +1,176 @@
+/*
+ * This file is part of the libsigrok project.
+ *
+ * Copyright (C) 2023 taorye <taorye@outlook.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef LIBSIGROK_HARDWARE_SIPEED_SLOGIC_ANALYZER_PROTOCOL_H
+#define LIBSIGROK_HARDWARE_SIPEED_SLOGIC_ANALYZER_PROTOCOL_H
+
+#include <stdint.h>
+#include <glib.h>
+#include <libusb.h>
+#include <libsigrok/libsigrok.h>
+#include "libsigrok-internal.h"
+
+#define LOG_PREFIX "sipeed-slogic-analyzer"
+
+#define EP_IN 0x01
+#define SIZE_MAX_EP_HS 512
+#define NUM_MAX_TRANSFERS 64
+
+static const uint64_t samplerates[] = {
+	/* 160M = 2*2*2*2*2*5M */
+	SR_MHZ(1),
+	SR_MHZ(2),
+	SR_MHZ(4),
+	SR_MHZ(5),
+	SR_MHZ(8),
+	SR_MHZ(10),
+	SR_MHZ(16),
+	SR_MHZ(20),
+	SR_MHZ(32),
+	SR_MHZ(36),
+	SR_MHZ(40),
+	/* x 4ch */
+	SR_MHZ(64),
+	SR_MHZ(80),
+	/* x 2ch */
+	SR_MHZ(120),
+	SR_MHZ(128),
+	SR_MHZ(144),
+	SR_MHZ(160),
+};
+
+struct dev_context {
+	struct {
+		uint64_t limit_samples;
+		uint64_t cur_samplerate;
+		uint64_t cur_samplechannel;
+	};
+
+	uint64_t num_transfers;
+	struct libusb_transfer *transfers[NUM_MAX_TRANSFERS];
+
+	gboolean acq_aborted;
+
+	uint64_t timeout;
+
+	size_t transfers_buffer_size;
+
+	size_t bytes_need_transfer;
+	size_t bytes_transferring;
+	size_t bytes_transfered;
+	size_t transfers_used;
+
+	gboolean trigger_fired;
+	struct soft_trigger_logic *stl;
+
+	uint64_t num_frames;
+	uint64_t sent_samples;
+	int submitted_transfers;
+	int empty_transfer_count;
+
+
+	double voltage_threshold[2];
+	/* Triggers */
+	uint64_t capture_ratio;
+};
+
+static inline void devc_set_samplerate(struct dev_context *devc, uint64_t new_samplerate) {
+	devc->cur_samplerate = new_samplerate;
+	if (new_samplerate >= SR_MHZ(120)) {
+		devc->cur_samplechannel = 2;
+	} else if (new_samplerate >= SR_MHZ(40)) {
+		devc->cur_samplechannel = 4;
+	} else {
+		devc->cur_samplechannel = 8;
+	}
+	sr_info("rebind sample channel to %uCH", devc->cur_samplechannel);
+}
+
+#pragma pack(push, 1)
+struct cmd_start_acquisition {
+  union {
+    struct {
+      uint8_t sample_rate_l;
+      uint8_t sample_rate_h;
+    };
+    uint16_t sample_rate;
+  };
+	uint8_t sample_channel;
+};
+#pragma pack(pop)
+
+/* Protocol commands */
+#define CMD_START	0xb1
+#define CMD_STOP	0xb3
+
+SR_PRIV int sipeed_slogic_acquisition_start(const struct sr_dev_inst *sdi);
+SR_PRIV int sipeed_slogic_acquisition_stop(struct sr_dev_inst *sdi);
+
+static inline size_t to_bytes_per_ms(struct dev_context *devc)
+{
+	return (devc->cur_samplerate * devc->cur_samplechannel) / 8 / 1000;
+}
+
+static inline size_t get_buffer_size(struct dev_context *devc)
+{
+	/**
+	 * The buffer should be large enough to hold 10ms of data and
+	 * a multiple of 210 * 512.
+	 */
+	// const size_t pack_size = SIZE_MAX_EP_HS;
+	// size_t s = 10 * to_bytes_per_ms(devc);
+	// size_t rem = s % (210 * pack_size);
+	// if (rem) s += 210 * pack_size - rem;
+	// return s;
+	return 210 * SIZE_MAX_EP_HS;
+}
+
+static inline size_t get_number_of_transfers(struct dev_context *devc)
+{
+	/* Total buffer size should be able to hold about 500ms of data. */
+	// size_t s = 500 * to_bytes_per_ms(devc);
+	// size_t n = s / get_buffer_size(devc);
+	// size_t rem = s % get_buffer_size(devc);
+	// if (rem) n += 1;
+	// if (n > NUM_MAX_TRANSFERS)
+	// 	return NUM_MAX_TRANSFERS;
+	// return n;
+	return 1;
+}
+
+static inline size_t get_timeout(struct dev_context *devc)
+{
+	size_t total_size = get_buffer_size(devc) *
+			get_number_of_transfers(devc);
+	size_t timeout = total_size / to_bytes_per_ms(devc);
+	return timeout * 5 / 4; /* Leave a headroom of 25% percent. */
+}
+
+static inline void clear_ep(uint8_t ep, libusb_device_handle *usbh) {
+	sr_dbg("Clearring EP: %u", ep);
+	uint8_t tmp[512];
+	int actual_length = 0;
+	do {
+		libusb_bulk_transfer(usbh, ep | LIBUSB_ENDPOINT_IN,
+				tmp, sizeof(tmp), &actual_length, 100);
+	} while (actual_length);
+	sr_dbg("Cleared EP: %u", ep);
+}
+
+#endif
-- 
2.43.0

